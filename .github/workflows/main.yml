name: CI/CD Pipeline for .NET Core Claims API

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      run: dotnet restore api/api.claims.csproj
    - name: Build
      run: dotnet build api/api.claims.csproj --configuration Release --no-restore
    - name: Test with Coverage
      run: dotnet test api/api.claims.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --no-build --verbosity normal

    - name: Check Coverage Threshold
      if: ${{ always() }}  # Always run, even if previous steps fail
      run: |
        threshold=90
        actual=$(grep "<coverage line-rate=" coverage-report/Cobertura.xml | sed -E 's/.*line-rate="([0-9.]+)".*/\1/' | awk '{ sum += $1 } END { if (NR > 0) print sum / NR * 100; else print 0 }')
        if (( $(echo "$actual < $threshold" | bc -l) )); then
          echo "Code coverage ($actual%) is below the threshold ($threshold%). Failing the build."
          exit 1
        fi
        echo "Code coverage ($actual%) meets the threshold."

  package_and_deploy:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Build and publish
      run: dotnet publish api/api.claims.csproj -c Release -o ./publish
    - name: Build Docker image
      run: docker build -t Api.Claims .
    # - name: Push Docker image
    #   # You'll need to configure secrets for your container registry credentials
    #   run: docker push your-image-name
    # - name: Deploy to Kubernetes
    #   # Use actions to interact with your Kubernetes cluster and deploy the image
    #   # You'll need to configure secrets for your Kubernetes cluster access
    #   # Example using kubectl:
    #   run: |
    #     kubectl apply -f deployment.yaml
    #     kubectl rollout restart deployment your-deployment-name
